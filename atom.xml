<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Guirec Corbel]]></title>
  <link href="http://GCorbel.github.io/blog/atom.xml" rel="self"/>
  <link href="http://GCorbel.github.io/blog/"/>
  <updated>2013-10-12T07:42:49-04:00</updated>
  <id>http://GCorbel.github.io/blog/</id>
  <author>
    <name><![CDATA[Guirec Corbel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Leap Motion : le point de vue d'un développeur]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur/"/>
    <updated>2013-10-12T07:41:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur</id>
    <content type="html"><![CDATA[<p>La semaine dernière, la société <a href="http://www.optik360.com/">Optik 360</a>, spécialisée en photo 360 degrés, m&#8217;a demandé de tester Leap Motion en faisant une application permettant de visionner des images panoramiques. L&#8217;image devait se déplacer en fonction des mouvements fait par l&#8217;utilisateur.</p>

<p>Pour ceux qui ne connaissent pas encore Leap Motion, il s&#8217;agit d&#8217;un petit capteur de mouvements d&#8217;environ 8 centimètres. Pour plus d&#8217;informations, rendez-vous sur <a href="https://www.leapmotion.com/">leur site officiel</a>.</p>

<h2>Phase 1 : Installation</h2>

<p>Sous Windows, l&#8217;installation s&#8217;est faite en moins de 5 minutes. Je me suis rendu sur la page indiquée pour télécharger l&#8217;application, je l&#8217;ai installée et mes mouvements ont été détectés par le contrôleur Leap Motion.</p>

<p>Je m&#8217;attendais à ce que mon CPU soit surchargé. Ce n&#8217;est vraiment pas le cas. Quand je bouge devant le contrôleur, Leap Motion prend 7% du CPU. Windows Media Player prend 8%. J&#8217;ai pourtant choisi le maximum de précision, au détriment de la rapidité, dans le panneau de configuration. Donc, il n&#8217;y a aucun problème au niveau de la rapidité.</p>

<p>Après avoir bougé les mains dans tous les sens en testant les applications fournies (mon chien me prend pour un fou), j&#8217;ai voulu l&#8217;installer sur Ubuntu 12.04. Il est possible de télécharger une version du SDK compatible Linux sur leur site. L&#8217;installation se fait également très rapidement. Le contrôleur et le panneau de configuration se sont lancés correctement. Le seul problème que j&#8217;ai rencontré : ça ne fonctionne pas. Le contrôleur ne reconnait pas mes mouvements alors qu&#8217;il n&#8217;y a aucun problème sur Windows. J&#8217;ai envoyé <a href="https://developer.leapmotion.com/forums/forums/10/topics/1811">un message sur leur forum</a>. Pour le moment, je n&#8217;ai eu aucune réponse. On va voir pour la suite.</p>

<h2>Phase 2 : Premier développement</h2>

<p>Par la suite, je suis retourné sur Windows pour commencer à développer. Leap Motion possède des SDK officiels dans plusieurs langages. Malheureusement, mon langage préféré, Ruby, n&#8217;est pas supporté officiellement. Je trouve ça génial d&#8217;avoir choisi d&#8217;être compatible avec plusieurs langages. Ça laisse énormément de possibilités aux développeurs.</p>

<p>Pour mon projet, j&#8217;ai choisi de développer en JavaScript. LeapMotion permet de faire une application coté client. L&#8217;application écoute un certain port pour recevoir des données depuis le contrôleur. Le choix du JavaScript s&#8217;est fait uniquement sur le fait qu&#8217;il n&#8217;est pas nécessaire de faire une installation sur un PC. Un simple navigateur (moderne), permet d&#8217;avoir une application qui fonctionne avec Leap. Génial!</p>

<p>La bibliothèque offerte par Leap est impressionnante. C&#8217;est super simple de faire une application. Il suffit de quelques lignes de code. Voici un exemple :</p>

<div>
  <pre><code class='coffeescript'>Leap.loop(function(frame) {
  console.log(frame.fingers.length)
});</code></pre>
</div>


<p>Ce petit bout de code permet de voir le nombre de doigts détectés par le contrôleur. N&#8217;importe quel développeur est capable de faire ça.</p>

<h2>Phase 3 : Recherche d&#8217;une bibliothèque JavaScript</h2>

<p>Après quelques tests, je me suis mis à la recherche d&#8217;un code existant permettant d&#8217;afficher une image panoramique. Je suis tombé sur <a href="http://mrdoob.github.io/three.js/examples/webgl_panorama_equirectangular.html">ce projet</a>. L&#8217;avantage de ce code est qu&#8217;il utilise <a href="http://threejs.org/">Three.js</a>. Three.js est une bibliothèque permettant de faire des animations 3D en JavaScript. Il existe beaucoup d&#8217;<a href="http://mrdoob.github.io/three.js/">exemples fournis pas les développeurs de Three.js</a>. Avec du travail, on peut développer une version compatible avec Leap de tous ces exemples.</p>

<p>J&#8217;ai donc téléchargé le code en local et j&#8217;ai commencé à le modifier pour le mettre un peu plus &ldquo;à ma sauce&rdquo;. Je l&#8217;ai changé pour qu&#8217;il soit un peu plus orienté objet et j&#8217;ai utilisé coffeescript.</p>

<h2>Phase 4 : Intégration de Leap à la bibliothèque</h2>

<p>J&#8217;ai étudié le comportement de la souris et j&#8217;ai voulu le reproduire. Tout d&#8217;abord, j&#8217;ai extrait le code relatif à la souris dans un objet à part. Pour tester le déplacement avec Leap Motion, mon premier réflexe a été de faire ce genre de code :</p>

<div>
  <pre><code class='coffeescript'>class LeapPano.LeapMotion
  constructor: (view) -&gt;
    @view = view

  init: =&gt;
    Leap.loop((frame) =&gt;
      @view.setLon(@view.getLon() + .1)
    )</code></pre>
</div>


<p>Ce code permet, à chaque itération, de déplacer horizontalement la caméra. Le problème que je trouve avec ce que est que je ne gère pas la rapidité des itérations. Je n&#8217;ai pas trouvé de façon de faire dans la documentation de Leap. J&#8217;ai donc choisi de modifier le code comme ceci :</p>

<div>
  <pre><code class='coffeescript'>class LeapPano.LeapMotion
  constructor: (view) -&gt;
    @view = view

  setFrame: (frame) -&gt;
    @frame = frame

  init: -&gt;
    setTimeout(@checkMotion, 10)

  checkMotion: =&gt;
    if @frame?
      @view.setLon(@view.getLon() + .1)

    setTimeout(@checkMotion, 10)</code></pre>
</div>


<p>L&#8217;appel de la fonction <code>Leap.loop</code> est extraite de cet objet et le résultat est passé via un setter à chaque itération. À l&#8217;initialisation, la fonction setTimeout, permettant d’exécuter la fonction de reconnaissance des mouvements toutes les dix millisecondes, est lancée. Ce code permet également de ne pas avoir plusieurs appels à la fonction <code>Leap.loop</code>. La boucle est lancée dans la page principale et les données détectées sont transmises aux différents objets en ayant besoin. Je crois que c&#8217;est une meilleure architecture.</p>

<p>Maintenant que ça marche comme je veux, je peux m&#8217;occuper de la reconnaissance des mouvements. J&#8217;ai modifié la fonction <code>checkMotion</code> comme ceci :</p>

<div>
  <pre><code class='coffeescript'>checkMotion: =&gt;
  if @frame?
    finger = @frame.fingers[0]
    if finger?
      x = finger.tipPosition[0]
      y = finger.tipPosition[1]
      @view.setLon(@view.getLon() + (x/320))
      @view.setLat(@view.getLat() + ((y-160)/320))

  setTimeout(@checkMotion, 10)</code></pre>
</div>


<p><code>@frame.fingers[0]</code> permet de récupérer le premier doigt détecté. <code>finger.tipPosition</code> retourne un tableau contenant la position en X, en Y et en Z. Enfin, je change la position de la caméra dans la scène 3D. Le calcul d&#8217;un ratio permet de faire en sorte d’accélérer ou de ralentir le mouvement selon la position du doigt. Plus le doigt est éloigné du centre, plus le déplacement est rapide.</p>

<p>La dernière fonction que j&#8217;ai voulu ajouté a été de changer l&#8217;image lorsque l&#8217;on décrit un cercle. J&#8217;ai donc ajouté ceci :</p>

<div>
  <pre><code class='coffeescript'>if(@frame.gestures.length &gt; 0)
  gesture = @frame.gestures[0]
  if gesture.type == &quot;circle&quot;
    @view.switchFile()</code></pre>
</div>


<p>Encore une fois, c&#8217;est très simple. <code>@frame.gestures</code> retourne une liste des mouvements détectés. Par la suite, il faut vérifier si le type de mouvement est un cercle. Si c&#8217;est le cas, alors on change d&#8217;image.</p>

<p>Pour permettre la reconnaissance des mouvements, il est nécessaire d&#8217;appeller la fonction <code>Leap.loop</code> :</p>

<div>
  <pre><code class='coffeescript'>Leap.loop({enableGestures: true}, function(frame) {
  pano.setFrame(frame)
})</code></pre>
</div>


<p>Et voila! Tout fonctionne. En tant que bon contributeur Open-Source j&#8217;ai affiché le code ici : <a href="https://github.com/GCorbel/LeapPano">https://github.com/GCorbel/LeapPano</a>. J&#8217;ai également créé un page grâce a <a href="http://pages.github.com/">GitHub-Pages</a> visible ici : <a href="http://gcorbel.github.io/LeapPano/">http://gcorbel.github.io/LeapPano/</a>.</p>

<h2>Ce que j&#8217;aime dans Leap Motion</h2>

<p>Premièrement, j&#8217;ai beaucoup aimé la facilité d&#8217;installation. On branche, on installe et ça marche. Le développement est extrêmement facile. L&#8217;API fournie est la plus simple possible. Le fait qu&#8217;elle soit disponible en plusieurs langages est génial. Je suis vraiment impressionné des possibilités fournies et de la simplicité.</p>

<h2>Là où j&#8217;ai des doutes</h2>

<p>Petit bémol pour la documentation. Je trouve que la documentation officielle est assez peu détaillée. Il y a peu de code affiché. Pour voir du code réel, il est nécessaire de rechercher les exemples disponibles sur GitHub.</p>

<p>Au niveau de la reconnaissance des mouvements, il existe trois mouvements &ldquo;de base&rdquo; : Circle, Swipe et Tap. Ajouter d&#8217;autres mouvements est beaucoup plus complexe. On ne peut pas imaginer faire un jeu comme <a href="http://fr.wikipedia.org/wiki/Black_and_White_%28jeu_vid%C3%A9o%29">Black &amp; White</a> pour le moment.</p>

<p>Le gros point faible est la précision. Le nombre de doigts détectés n&#8217;est pas toujours réel et la position est approximative. Quand on y pense, c&#8217;est normal. Si l&#8217;on pointe une image vers l&#8217;écran, notre doigt tremble. Viser une icône peut être très long. Leap Motion ne n&#8217;est pas prêt à remplacer la souris.</p>

<p>De plus, je trouve que la détection de pointeurs est très hasardeuse. Un crayon passe de détecté à non détecté sans raison. La détection des doigts est beaucoup plus stable.</p>

<p>Ceci dit, Leap Motion est à sa version 0.8. Il s&#8217;agit d&#8217;un système tout nouveau. On peut imaginer que le système va s&#8217;améliorer au fil du temps.</p>

<h2>Conclusion</h2>

<p>J&#8217;adore Leap Motion. Il suffit de compter le nombre de fois ou j&#8217;ai marqué &ldquo;Génial&rdquo; dans cet article pour le comprendre.</p>

<p>Le futur comme imaginé dans les années 80/90 est à notre portée. On n&#8217;est pas encore capable de faire des tableaux comme dans Minority Report mais on s&#8217;y approche. Des technologies comme Leap, Google Voice, Google glaces, la domotique, etc. font rêver. Le futur est accessible et n&#8217;importe quel développeur est capable de faire des choses impressionnantes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand j'utilise des Helpers, des Partials, des Presenters et des Decorators]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/12/quand-jutilise-des-helpers-des-partials-des-presenters-et-des-decorators/"/>
    <updated>2013-10-12T07:38:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/12/quand-jutilise-des-helpers-des-partials-des-presenters-et-des-decorators</id>
    <content type="html"><![CDATA[<p>Il existe plusieurs différentes façons d&#8217;avoir une meilleure organisation des vues dans une application Ruby on Rails. Les Partials et les Heplers sont des méthodes standard. Il y a également les Presenters et les Decorators. Cela peut-être quelque peu difficile de savoir comment et quand les utiliser.</p>

<h1>Mon organisation</h1>

<p>Toutes les techniques ont leur propre utilité.</p>

<h2>Les Helpers</h2>

<p>Les Helpers sont des méthodes génériques qui peuvent être utilisées pour différents types d&#8217;objet. Je crée des helpers du style <code>link_to_update</code>, <code>big_image</code>, <code>styled_form</code>, etc. Ces méthodes créent du code html avec, par exemple, un style css ou un texte standard.</p>

<h2>Les Partials</h2>

<p>Les Partials sont utilisés pour diviser une grosse vue dans de plus petites parties logiques. Je peux avoir un partial <code>side_menu</code>, <code>comment_list</code>, <code>header</code>, etc.</p>

<h2>Les Presenters</h2>

<p>Les Presenters sont créés pour des requêtes plus compliquées avec un modèle ou plus. J&#8217;ai des presenters comme <code>@page_presenter.page_in_category(ruby_category)</code> ou <code>@user_presenter.user_following(an_article)</code>.</p>

<h2>Les Decorators</h2>

<p>Les Decorators doivent interagir avec un modèle seulement et ne doivent pas avoir de paramètre (si possible). Je peux faire cette sorte de code : <code>user.full_name</code>, <code>page.big_title</code> ou <code>category.permalink</code>. J&#8217;utilise la Gem <a href="https://github.com/drapergem/draper">Draper</a>.</p>

<p>Si je cherche plusieurs modèles, Je n&#8217;accède pas à la classe du modèle directement dans la vue. J&#8217;utilise la fonction de Draper <a href="https://github.com/drapergem/draper#decorated-finders">decorates_finders</a>.</p>

<h2>Conclusion</h2>

<p>Il peut y avoir de meilleures solutions mais ça marche pour moi. Si vous pensez avoir de meilleures solutions, dites le moi!</p>

<p>Il y a juste une chose que je n&#8217;aime pas avec les Presenters. Je n&#8217;aime pas instancier un objet dans le contrôleur et le passer à la vue. Cela ne respecte pas la <a href="http://robots.thoughtbot.com/post/50655960596/sandi-metz-rules-for-developers">règle de Sandi Metz</a>. Toutes les règles peuvent être brisées avec des bonnes raisons&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress : A blog for developers]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/11/octopress-a-blog-for-developers/"/>
    <updated>2013-10-11T22:23:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/11/octopress-a-blog-for-developers</id>
    <content type="html"><![CDATA[<p>This is my first test</p>
]]></content>
  </entry>
  
</feed>
