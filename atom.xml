<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Guirec Corbel]]></title>
  <link href="http://GCorbel.github.io/blog/atom.xml" rel="self"/>
  <link href="http://GCorbel.github.io/blog/"/>
  <updated>2013-10-27T14:31:04-04:00</updated>
  <id>http://GCorbel.github.io/blog/</id>
  <author>
    <name><![CDATA[Guirec Corbel]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sbire : Dites ce que vous voulez, il le fera]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/27/sbire-dites-ce-que-vous-voulez-il-le-fera/"/>
    <updated>2013-10-27T13:24:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/27/sbire-dites-ce-que-vous-voulez-il-le-fera</id>
    <content type="html"><![CDATA[<p>Sbire est un outil permettant d&#8217;exécuter des commandes grâce à la voix. Le principe est simple. Vous taper une commande pour l&#8217;enregistrement d&#8217;une phrase avec un micro et vous taper une seconde commande pour terminer l&#8217;enregistrement. Suite à cela, Sbire reconnait votre voix et exécute la commande associée.</p>

<!--more-->


<h2>Sbire en action</h2>

<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/Fvu9tS0lsYE "></iframe></div>


<h2>Comment ça marche?</h2>

<p>Il s&#8217;agit d&#8217;un programme écrit en Ruby. Celui-ci fait appel à sox pour faire un enregistrement audio. Il fait ensuite appel à Google voice en y joignant le fichier et y récupère le résultat en format JSon. Ce résultat est ensuite traité et la comme trouvée est exécutée.</p>

<h2>Contibuer</h2>

<p>Évidemment, je suis ouvert à toute remarque et suggestion. Les contributions sont également les bienvenues. Vous pouvez les soumettes sur <a href="https://github.com/GCorbel/sbire">Github</a>.</p>

<h2>Plus d&#8217;information</h2>

<p>Pour des informations sur l&#8217;installation, l&#8217;utilisation et la configuration, rendez-vous sur la <a href="https://github.com/GCorbel/sbire">page Github du projet</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Table ronde en ligne]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/22/table-ronde-en-ligne/"/>
    <updated>2013-10-22T19:47:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/22/table-ronde-en-ligne</id>
    <content type="html"><![CDATA[<p style="text-align:center;">Le <strong>dimanche 3 novembre à 17h</strong> (heure française) aura lieu la première édition d&#8217;une <strong>table ronde en ligne</strong>.</p>

<!--more-->


<h2>Principe</h2>

<p>Une table ronde est une discussion, avec plusieurs participants, sur un sujet.
Les participants ne doivent pas forcement être des experts dans le domaine, mais doivent avoir de connaissance pour pouvoir en parler.
La discussion doit se faire dans une ambiance cordiale. Personne ne prétend détenir la solution à tous les problèmes et chacun doit pouvoir exprimer son point de vue en gardant l&#8217;esprit ouvert.</p>

<h2>Sujet</h2>

<p>Le sujet de la première discussion sera <strong>les designs patterns</strong> avec Ruby on Rails.</p>

<p>Voici le plan de la première rencontre :</p>

<ul>
<li>Présentation des participants;</li>
<li>Définition d&#8217;un design pattern;</li>
<li>Discussion à propos des designs patterns connus :

<ul>
<li>Fat model/Skinny controllers</li>
<li>Service objects</li>
<li>Form objects</li>
<li>DCI</li>
</ul>
</li>
<li>Quels design pattern utilisez-vous?</li>
<li>Varia;</li>
</ul>


<p>Le plan pourra varier selon l&#8217;avancement de la discussion. Aucune limite de temps n&#8217;est imposée pour la première rencontre.</p>

<h2>Où sera publiée la discussion?</h2>

<p>La discussion sera publiée sur YouTube. Je publierais la vidéo sur <a href="http://www.youtube.com/channel/UCRSzJI-E_8cqKwFH3KsZDxQ">ma chaine YouTube</a>. Je publierai l&#8217;adresse sur twitter.</p>

<h2>Comment pourrais-je rejoindre la discussion?</h2>

<p>La discussion se fera par Google Hangout. Je donnerais le lien aux participants une heure avant la rencontre.
Assurez-vous d&#8217;avoir correctement installé le plug-in nécessaire pour participer ainsi qu&#8217;un micro et une webcam qui fonctionne avant de participer.</p>

<h2>Comment participer?</h2>

<p>Si vous êtes disponible à l&#8217;heure et à la date indiquée, vous pouvez demander à participer en m&#8217;envoyant un courriel à <a href="&#109;&#97;&#105;&#108;&#116;&#111;&#58;&#103;&#117;&#105;&#x72;&#x65;&#x63;&#x2e;&#99;&#x6f;&#x72;&#x62;&#x65;&#x6c;&#x40;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;">&#103;&#117;&#x69;&#x72;&#x65;&#x63;&#x2e;&#x63;&#x6f;&#114;&#x62;&#101;&#x6c;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a> ou en privé <a href="https://twitter.com/GuirecCorbel">mon compte Twitter</a>.</p>

<p>À dimanche!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leap Motion : le point de vue d'un développeur]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur/"/>
    <updated>2013-10-12T07:41:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/12/leap-motion-le-point-de-vue-dun-developpeur</id>
    <content type="html"><![CDATA[<p>La semaine dernière, la société <a href="http://www.optik360.com/">Optik 360</a>, spécialisée en photo 360 degrés, m&#8217;a demandé de tester Leap Motion en faisant une application permettant de visionner des images panoramiques. L&#8217;image devait se déplacer en fonction des mouvements fait par l&#8217;utilisateur.</p>

<p>Pour ceux qui ne connaissent pas encore Leap Motion, il s&#8217;agit d&#8217;un petit capteur de mouvements d&#8217;environ 8 centimètres. Pour plus d&#8217;informations, rendez-vous sur <a href="https://www.leapmotion.com/">leur site officiel</a>.</p>

<!--more-->


<h2>Phase 1 : Installation</h2>

<p>Sous Windows, l&#8217;installation s&#8217;est faite en moins de 5 minutes. Je me suis rendu sur la page indiquée pour télécharger l&#8217;application, je l&#8217;ai installée et mes mouvements ont été détectés par le contrôleur Leap Motion.</p>

<p>Je m&#8217;attendais à ce que mon CPU soit surchargé. Ce n&#8217;est vraiment pas le cas. Quand je bouge devant le contrôleur, Leap Motion prend 7% du CPU. Windows Media Player prend 8%. J&#8217;ai pourtant choisi le maximum de précision, au détriment de la rapidité, dans le panneau de configuration. Donc, il n&#8217;y a aucun problème au niveau de la rapidité.</p>

<p>Après avoir bougé les mains dans tous les sens en testant les applications fournies (mon chien me prend pour un fou), j&#8217;ai voulu l&#8217;installer sur Ubuntu 12.04. Il est possible de télécharger une version du SDK compatible Linux sur leur site. L&#8217;installation se fait également très rapidement. Le contrôleur et le panneau de configuration se sont lancés correctement. Le seul problème que j&#8217;ai rencontré : ça ne fonctionne pas. Le contrôleur ne reconnait pas mes mouvements alors qu&#8217;il n&#8217;y a aucun problème sur Windows. J&#8217;ai envoyé <a href="https://developer.leapmotion.com/forums/forums/10/topics/1811">un message sur leur forum</a>. Pour le moment, je n&#8217;ai eu aucune réponse. On va voir pour la suite.</p>

<h2>Phase 2 : Premier développement</h2>

<p>Par la suite, je suis retourné sur Windows pour commencer à développer. Leap Motion possède des SDK officiels dans plusieurs langages. Malheureusement, mon langage préféré, Ruby, n&#8217;est pas supporté officiellement. Je trouve ça génial d&#8217;avoir choisi d&#8217;être compatible avec plusieurs langages. Ça laisse énormément de possibilités aux développeurs.</p>

<p>Pour mon projet, j&#8217;ai choisi de développer en JavaScript. LeapMotion permet de faire une application coté client. L&#8217;application écoute un certain port pour recevoir des données depuis le contrôleur. Le choix du JavaScript s&#8217;est fait uniquement sur le fait qu&#8217;il n&#8217;est pas nécessaire de faire une installation sur un PC. Un simple navigateur (moderne), permet d&#8217;avoir une application qui fonctionne avec Leap. Génial!</p>

<p>La bibliothèque offerte par Leap est impressionnante. C&#8217;est super simple de faire une application. Il suffit de quelques lignes de code. Voici un exemple :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Leap</span><span class="p">.</span><span class="nx">loop</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">frame</span><span class="p">.</span><span class="nx">fingers</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce petit bout de code permet de voir le nombre de doigts détectés par le contrôleur. N&#8217;importe quel développeur est capable de faire ça.</p>

<h2>Phase 3 : Recherche d&#8217;une bibliothèque JavaScript</h2>

<p>Après quelques tests, je me suis mis à la recherche d&#8217;un code existant permettant d&#8217;afficher une image panoramique. Je suis tombé sur <a href="http://mrdoob.github.io/three.js/examples/webgl_panorama_equirectangular.html">ce projet</a>. L&#8217;avantage de ce code est qu&#8217;il utilise <a href="http://threejs.org/">Three.js</a>. Three.js est une bibliothèque permettant de faire des animations 3D en JavaScript. Il existe beaucoup d&#8217;<a href="http://mrdoob.github.io/three.js/">exemples fournis pas les développeurs de Three.js</a>. Avec du travail, on peut développer une version compatible avec Leap de tous ces exemples.</p>

<p>J&#8217;ai donc téléchargé le code en local et j&#8217;ai commencé à le modifier pour le mettre un peu plus &ldquo;à ma sauce&rdquo;. Je l&#8217;ai changé pour qu&#8217;il soit un peu plus orienté objet et j&#8217;ai utilisé coffeescript.</p>

<h2>Phase 4 : Intégration de Leap à la bibliothèque</h2>

<p>J&#8217;ai étudié le comportement de la souris et j&#8217;ai voulu le reproduire. Tout d&#8217;abord, j&#8217;ai extrait le code relatif à la souris dans un objet à part. Pour tester le déplacement avec Leap Motion, mon premier réflexe a été de faire ce genre de code :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">LeapPano</span><span class="p">.</span><span class="nx">LeapMotion</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(view) -&gt;</span>
</span><span class='line'>    <span class="vi">@view = </span><span class="nx">view</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">init: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="nx">Leap</span><span class="p">.</span><span class="nx">loop</span><span class="p">(</span><span class="nf">(frame) =&gt;</span>
</span><span class='line'>      <span class="nx">@view</span><span class="p">.</span><span class="nx">setLon</span><span class="p">(</span><span class="nx">@view</span><span class="p">.</span><span class="nx">getLon</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ce code permet, à chaque itération, de déplacer horizontalement la caméra. Le problème que je trouve avec ce que est que je ne gère pas la rapidité des itérations. Je n&#8217;ai pas trouvé de façon de faire dans la documentation de Leap. J&#8217;ai donc choisi de modifier le code comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">LeapPano</span><span class="p">.</span><span class="nx">LeapMotion</span>
</span><span class='line'>  <span class="nv">constructor: </span><span class="nf">(view) -&gt;</span>
</span><span class='line'>    <span class="vi">@view = </span><span class="nx">view</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">setFrame: </span><span class="nf">(frame) -&gt;</span>
</span><span class='line'>    <span class="vi">@frame = </span><span class="nx">frame</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">init: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">@checkMotion</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">checkMotion: </span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">@frame</span><span class="o">?</span>
</span><span class='line'>      <span class="nx">@view</span><span class="p">.</span><span class="nx">setLon</span><span class="p">(</span><span class="nx">@view</span><span class="p">.</span><span class="nx">getLon</span><span class="p">()</span> <span class="o">+</span> <span class="p">.</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">@checkMotion</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>L&#8217;appel de la fonction <code>Leap.loop</code> est extraite de cet objet et le résultat est passé via un setter à chaque itération. À l&#8217;initialisation, la fonction setTimeout, permettant d’exécuter la fonction de reconnaissance des mouvements toutes les dix millisecondes, est lancée. Ce code permet également de ne pas avoir plusieurs appels à la fonction <code>Leap.loop</code>. La boucle est lancée dans la page principale et les données détectées sont transmises aux différents objets en ayant besoin. Je crois que c&#8217;est une meilleure architecture.</p>

<p>Maintenant que ça marche comme je veux, je peux m&#8217;occuper de la reconnaissance des mouvements. J&#8217;ai modifié la fonction <code>checkMotion</code> comme ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">checkMotion: </span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">@frame</span><span class="o">?</span>
</span><span class='line'>    <span class="nv">finger = </span><span class="nx">@frame</span><span class="p">.</span><span class="nx">fingers</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">finger</span><span class="o">?</span>
</span><span class='line'>      <span class="nv">x = </span><span class="nx">finger</span><span class="p">.</span><span class="nx">tipPosition</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>      <span class="nv">y = </span><span class="nx">finger</span><span class="p">.</span><span class="nx">tipPosition</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>      <span class="nx">@view</span><span class="p">.</span><span class="nx">setLon</span><span class="p">(</span><span class="nx">@view</span><span class="p">.</span><span class="nx">getLon</span><span class="p">()</span> <span class="o">+</span> <span class="p">(</span><span class="nx">x</span><span class="o">/</span><span class="mi">320</span><span class="p">))</span>
</span><span class='line'>      <span class="nx">@view</span><span class="p">.</span><span class="nx">setLat</span><span class="p">(</span><span class="nx">@view</span><span class="p">.</span><span class="nx">getLat</span><span class="p">()</span> <span class="o">+</span> <span class="p">((</span><span class="nx">y</span><span class="o">-</span><span class="mi">160</span><span class="p">)</span><span class="o">/</span><span class="mi">320</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">@checkMotion</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>@frame.fingers[0]</code> permet de récupérer le premier doigt détecté. <code>finger.tipPosition</code> retourne un tableau contenant la position en X, en Y et en Z. Enfin, je change la position de la caméra dans la scène 3D. Le calcul d&#8217;un ratio permet de faire en sorte d’accélérer ou de ralentir le mouvement selon la position du doigt. Plus le doigt est éloigné du centre, plus le déplacement est rapide.</p>

<p>La dernière fonction que j&#8217;ai voulu ajouté a été de changer l&#8217;image lorsque l&#8217;on décrit un cercle. J&#8217;ai donc ajouté ceci :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">if</span><span class="p">(</span><span class="nx">@frame</span><span class="p">.</span><span class="nx">gestures</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">gesture = </span><span class="nx">@frame</span><span class="p">.</span><span class="nx">gestures</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">gesture</span><span class="p">.</span><span class="nx">type</span> <span class="o">==</span> <span class="s">&quot;circle&quot;</span>
</span><span class='line'>    <span class="nx">@view</span><span class="p">.</span><span class="nx">switchFile</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Encore une fois, c&#8217;est très simple. <code>@frame.gestures</code> retourne une liste des mouvements détectés. Par la suite, il faut vérifier si le type de mouvement est un cercle. Si c&#8217;est le cas, alors on change d&#8217;image.</p>

<p>Pour permettre la reconnaissance des mouvements, il est nécessaire d&#8217;appeller la fonction <code>Leap.loop</code> :</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Leap</span><span class="p">.</span><span class="nx">loop</span><span class="p">({</span><span class="nv">enableGestures: </span><span class="kc">true</span><span class="p">},</span> <span class="nx">function</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">pano</span><span class="p">.</span><span class="nx">setFrame</span><span class="p">(</span><span class="nx">frame</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Et voila! Tout fonctionne. En tant que bon contributeur Open-Source j&#8217;ai affiché le code ici : <a href="https://github.com/GCorbel/LeapPano">https://github.com/GCorbel/LeapPano</a>. J&#8217;ai également créé un page grâce a <a href="http://pages.github.com/">GitHub-Pages</a> visible ici : <a href="http://gcorbel.github.io/LeapPano/">http://gcorbel.github.io/LeapPano/</a>.</p>

<h2>Ce que j&#8217;aime dans Leap Motion</h2>

<p>Premièrement, j&#8217;ai beaucoup aimé la facilité d&#8217;installation. On branche, on installe et ça marche. Le développement est extrêmement facile. L&#8217;API fournie est la plus simple possible. Le fait qu&#8217;elle soit disponible en plusieurs langages est génial. Je suis vraiment impressionné des possibilités fournies et de la simplicité.</p>

<h2>Là où j&#8217;ai des doutes</h2>

<p>Petit bémol pour la documentation. Je trouve que la documentation officielle est assez peu détaillée. Il y a peu de code affiché. Pour voir du code réel, il est nécessaire de rechercher les exemples disponibles sur GitHub.</p>

<p>Au niveau de la reconnaissance des mouvements, il existe trois mouvements &ldquo;de base&rdquo; : Circle, Swipe et Tap. Ajouter d&#8217;autres mouvements est beaucoup plus complexe. On ne peut pas imaginer faire un jeu comme <a href="http://fr.wikipedia.org/wiki/Black_and_White_%28jeu_vid%C3%A9o%29">Black &amp; White</a> pour le moment.</p>

<p>Le gros point faible est la précision. Le nombre de doigts détectés n&#8217;est pas toujours réel et la position est approximative. Quand on y pense, c&#8217;est normal. Si l&#8217;on pointe une image vers l&#8217;écran, notre doigt tremble. Viser une icône peut être très long. Leap Motion ne n&#8217;est pas prêt à remplacer la souris.</p>

<p>De plus, je trouve que la détection de pointeurs est très hasardeuse. Un crayon passe de détecté à non détecté sans raison. La détection des doigts est beaucoup plus stable.</p>

<p>Ceci dit, Leap Motion est à sa version 0.8. Il s&#8217;agit d&#8217;un système tout nouveau. On peut imaginer que le système va s&#8217;améliorer au fil du temps.</p>

<h2>Conclusion</h2>

<p>J&#8217;adore Leap Motion. Il suffit de compter le nombre de fois ou j&#8217;ai marqué &ldquo;Génial&rdquo; dans cet article pour le comprendre.</p>

<p>Le futur comme imaginé dans les années 80/90 est à notre portée. On n&#8217;est pas encore capable de faire des tableaux comme dans Minority Report mais on s&#8217;y approche. Des technologies comme Leap, Google Voice, Google glaces, la domotique, etc. font rêver. Le futur est accessible et n&#8217;importe quel développeur est capable de faire des choses impressionnantes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quand j'utilise des Helpers, des Partials, des Presenters et des Decorators]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/12/quand-jutilise-des-helpers-des-partials-des-presenters-et-des-decorators/"/>
    <updated>2013-10-12T07:38:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/12/quand-jutilise-des-helpers-des-partials-des-presenters-et-des-decorators</id>
    <content type="html"><![CDATA[<p>Il existe plusieurs différentes façons d&#8217;avoir une meilleure organisation des vues dans une application Ruby on Rails. Les Partials et les Heplers sont des méthodes standard. Il y a également les Presenters et les Decorators. Cela peut-être quelque peu difficile de savoir comment et quand les utiliser.</p>

<!--more-->


<h1>Mon organisation</h1>

<p>Toutes les techniques ont leur propre utilité.</p>

<h2>Les Helpers</h2>

<p>Les Helpers sont des méthodes génériques qui peuvent être utilisées pour différents types d&#8217;objet. Je crée des helpers du style <code>link_to_update</code>, <code>big_image</code>, <code>styled_form</code>, etc. Ces méthodes créent du code html avec, par exemple, un style css ou un texte standard.</p>

<h2>Les Partials</h2>

<p>Les Partials sont utilisés pour diviser une grosse vue dans de plus petites parties logiques. Je peux avoir un partial <code>side_menu</code>, <code>comment_list</code>, <code>header</code>, etc.</p>

<h2>Les Presenters</h2>

<p>Les Presenters sont créés pour des requêtes plus compliquées avec un modèle ou plus. J&#8217;ai des presenters comme <code>@page_presenter.page_in_category(ruby_category)</code> ou <code>@user_presenter.user_following(an_article)</code>.</p>

<h2>Les Decorators</h2>

<p>Les Decorators doivent interagir avec un modèle seulement et ne doivent pas avoir de paramètre (si possible). Je peux faire cette sorte de code : <code>user.full_name</code>, <code>page.big_title</code> ou <code>category.permalink</code>. J&#8217;utilise la Gem <a href="https://github.com/drapergem/draper">Draper</a>.</p>

<p>Si je cherche plusieurs modèles, Je n&#8217;accède pas à la classe du modèle directement dans la vue. J&#8217;utilise la fonction de Draper <a href="https://github.com/drapergem/draper#decorated-finders">decorates_finders</a>.</p>

<h2>Conclusion</h2>

<p>Il peut y avoir de meilleures solutions mais ça marche pour moi. Si vous pensez avoir de meilleures solutions, dites le moi!</p>

<p>Il y a juste une chose que je n&#8217;aime pas avec les Presenters. Je n&#8217;aime pas instancier un objet dans le contrôleur et le passer à la vue. Cela ne respecte pas la <a href="http://robots.thoughtbot.com/post/50655960596/sandi-metz-rules-for-developers">règle de Sandi Metz</a>. Toutes les règles peuvent être brisées avec des bonnes raisons&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress : Un moteur de blog pour les développeurs]]></title>
    <link href="http://GCorbel.github.io/blog/blog/2013/10/11/octopress-un-moteur-de-blog-pour-les-developpeurs/"/>
    <updated>2013-10-11T22:23:00-04:00</updated>
    <id>http://GCorbel.github.io/blog/blog/2013/10/11/octopress-un-moteur-de-blog-pour-les-developpeurs</id>
    <content type="html"><![CDATA[<p>Comme beaucoup de développeurs, je souhaite partager ma connaissance sur certains sujets. Pour ce
faire, j&#8217;ai voulu créer un blog. Cet article décrit la démarche que j&#8217;ai effectuée afin de créer
le blog.</p>

<!--more-->


<p>Afin de choisir un moteur de blog, j&#8217;ai fait le tour des sites de développeurs. Plusieurs solutions
sont couramment utilisées.</p>

<p>Premièrement, beaucoup de développeurs créent, eux-mêmes, leur site. Ne voulant pas réinventer la
roue, j&#8217;ai choisi d&#8217;utiliser un outil déjà existant. Créer un blog est assez répandu et il y a une kyrielle de bons outils créés pour répondre à ce besoin.</p>

<p>Il existe également beaucoup de personnes utilisant Wordpress. Wordpress ne correspond pas à ma
philosophie. Tout d&#8217;abord, c&#8217;est écrit en PHP et j&#8217;aime Ruby. Ensuite, je trouve que Wordpress est
une &ldquo;usine à gaz&rdquo;. C&#8217;est un peu comme utiliser Joomla pour faire des sites internet. C&#8217;est
probablement très bien pour les webmestres néophytes, mais je suis développeur et je souhaite
avoir plus de contrôle sur mon site, kit à mettre les mains dans le cambouis.</p>

<h2>Jekyll</h2>

<p>En continuant mes recherches, j&#8217;ai trouvé Jekyll que je connaissais seulement de nom. Jekyll est un
générateur de site statique. Celui-ci est extrêment puissant pour faire ce qu&#8217;il sait faire. Il
permet de générer des pages HTML à partir de fichiers textes créés en Markdown ou Textile et Liquid.
Avec Jekyll, il n&#8217;y a aucune base de données. Le résultat est uniquement du HTML et peut donc
être hébergé n&#8217;importe où. J&#8217;aime le fait d&#8217;avoir un rendu similaire à celui de n&#8217;importe quel site
sans avoir aucune logique du côté serveur.</p>

<p>Petit avertissement : Jekyll est destiné aux développeurs. J&#8217;imagine très mal une personne novice en
informatique utiliser cet outil. Si c&#8217;est ce que vous souhaitez dirigiez-vous sur Wordpress.</p>

<p>Jekyll est un outil très simple. Peut-être un peu trop simple pour faire ce que je souhaitais. Pour
mon blog, je souhaite avoir une partie &ldquo;sociale&rdquo; et un design agréable. J&#8217;ai tout d&#8217;abord trouvé
<a href="http://jekyllbootstrap.com/">JekyllBootstrap</a>. Sincèrement, je le déconseille. Je trouve ça
compliqué pour rien. La structure du code est assez compliquée et prend du temps à modifier
quand on n’est pas habitué à Jekyll. Pour ma part, c&#8217;était plus simple de tout faire moi-même avec
Jekyll.</p>

<h2>Octopress</h2>

<p>Rapidement, je suis tombé sur <a href="http://octopress.org/">Octopress</a>. Octopress est à
la fois simple, puissant et facilement modifiable. Il offre des commandes pour générer des pages,
générer des posts et publier les modifications. Sans connaitre l&#8217;outil et en connaissant un peu
Jekyll, en 10 minutes j&#8217;ai pu créer un blog, le publier, ajouter un post et configurer twitter,
GitHub, google plus, etc. En plus de cela, Octopress vient avec un design qui peut-être modifiable,
mais qui me convient parfaitement. J&#8217;ai donc choisi de le laisser tel quel.</p>

<p>Malheureusement, Octopress ne supporte pas l&#8217;internationalisation. J&#8217;ai suivi <a href="http://lkdjiin.github.io/blog/2013/07/13/je-veux-mon-blog-octopress-en-francais/">cet article</a> afin de franciser mon site.</p>

<h2>GitHub-Pages</h2>

<p>Pour ce qui est de l&#8217;hébergement, j&#8217;ai choisi <a href="http://pages.github.com/">GitHub-Pages</a>. Il y a
énormément d&#8217;avantages à utiliser GitHub-Pages. Tout d&#8217;abord, c&#8217;est gratuit. Ensuite, cela permet
de créer et de modifier les articles en utilisant les outils d&#8217;éditions en ligne de GitHub. Enfin,
le plus gros avantage selon moi est que n&#8217;importe qui peut faire un fork du projet et proposer des
améliorations ou corriger des fautes d&#8217;orthographe (merci à <a href="https://twitter.com/abelar_s">Sylvain Abélard</a>).</p>

<p>En général, je trouve qu&#8217;avoir un site du type &ldquo;monsite.wordpress.com&rdquo; ne fait pas très professionnel
et j&#8217;aurais tendance à acheter un nom de domaine. Dans ce cas, &ldquo;gcorbel.github.io/blog&rdquo; ça ne dérange
pas du tout. Ça fait développeur qui ne connais pas trop mal GitHub. J&#8217;économise sur le nom de domaine!</p>

<h2>Conclusion</h2>

<p>Pour ma part, je suis très content et je conseille à tous les développeurs cherchant un moteur de blog de l&#8217;essayer.</p>

<p>Je vais essayer d&#8217;ajouter des articles plus souvent. Restez connectés et <a href="https://twitter.com/GuirecCorbel">follow me on twitter</a>.</p>
]]></content>
  </entry>
  
</feed>
